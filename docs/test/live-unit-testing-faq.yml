### YamlMime:FAQ
metadata:
  title: Live Unit Testing SSS
  description: Desteklenen çerçeveler, yapılandırma ve özelleştirme dahil olmak üzere sık sorulan Live Unit Testing soruları gözden geçirin.
  ms.custom: SEO-VS-2020
  ms.date: 10/03/2017
  ms.topic: conceptual
  helpviewer_keywords:
  - Live Unit Testing FAQ
  author: mikejo5000
  ms.author: mikejo
  ms.workload:
  - dotnet
  ms.openlocfilehash: 1310990061f45c2100b9c028c90b1922f0294f32
  ms.sourcegitcommit: d4887ef2ca97c55e2dad9f179eec2c9631d91c95
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/06/2021
  ms.locfileid: "108800392"
title: Live Unit Testing sık sorulan sorular
summary: ''
sections:
- name: Desteklenen çerçeveler
  questions:
  - question: >
      Hangi test çerçeveleri Live Unit Testing destekler ve desteklenen en düşük sürüm nedir?
    answer: >
      Live Unit Testing, aşağıdaki tabloda listelenen üç popüler birim testi çerçevesi ile birlikte kullanılabilir. Bağdaştırıcıların ve çerçevelerinin desteklenen minimum sürümü tabloda de listelenmiştir. Birim test çerçevelerinin tümü NuGet.org adresinden kullanılabilir.


      |Test çerçevesi  |Visual Studio bağdaştırıcısı en düşük sürüm  |Framework minimum sürümü  |

      |---------|---------|---------|

      |xUnit.net |xUnit. Runner. VisualStudio sürüm 2.2.0-Beta3-build1187 |xUnit 1.9.2 |

      |NUnit |NUnit3TestAdapter sürümü 3.7.0 |NUnit sürümü 3.5.0 |

      |MSTest |MSTest. TestAdapter 1.1.4-Önizleme |MSTest. TestFramework 1.0.5-Önizleme |


      Başvuru yapan `Microsoft.VisualStudio.QualityTools.UnitTestFramework` ve daha yeni MSTest NuGet paketlerine geçmek istemediğiniz daha eski bir test projesi varsa, Visual studio 2019 veya Visual studio 2017 sürümüne yükseltin.


      Bazı durumlarda, Live Unit Testing çalışması için çözümdeki projeler tarafından başvurulan NuGet paketlerini açıkça geri yüklemeniz gerekebilir. Çözümün açık bir derlemesini yaparak (   >  en üst düzey Visual Studio menüsünden derleme **yeniden oluşturma çözümünü** seçin) ya da çözüme sağ tıklayıp ve ardından, bilgisayarlarda sağ tıklayıp **NuGet paketlerini geri yükle** ' yi seçerek paketleri geri yükleyebilirsiniz.
- name: .NET Core desteği
  questions:
  - question: >
      .NET Core Live Unit Testing çalışıyor mu?
    answer: >
      Evet. Live Unit Testing . NET Core ve .NET Framework.
- name: Yapılandırma
  questions:
  - question: >
      Neden Live Unit Testing çalışmıyor?
    answer: >
      Çıkış penceresi (Live Unit Testing açılan liste seçildiğinde) size neden çalışma Live Unit Testing gerektiğini söylemeli. Live Unit Testing aşağıdaki nedenlerden biri nedeniyle çalışmayabiliyor:


      - Çözümdeki projeler tarafından başvurulan NuGet paketleri geri Live Unit Testing çalışmaz. Çözümün açık bir derlemesini yapmak veya çözümü açmadan önce çözümde NuGet paketlerini geri Live Unit Testing bu sorunu çözmeniz gerekir.


      - Projeleriniz içinde MSTest tabanlı testler kullanıyorsanız, başvurularını kaldırarak en son MSTest NuGet paketlerine başvurular (en düşük `Microsoft.VisualStudio.QualityTools.UnitTestFramework` `MSTest.TestAdapter` sürüm 1.1.11 gereklidir) ve (en düşük sürüm `MSTest.TestFramework` 1.1.11 gereklidir) ekleyin. Daha fazla bilgi için, Live Unit Testing'de kullanma makalesinde "Desteklenen test [çerçeveleri" Visual Studio](live-unit-testing.md#supported-test-frameworks) bakın.


      - Çözümünüzdeki en az bir projenin bir NuGet başvurusu veya xUnit, NUnit veya MSTest test çerçevesine doğrudan başvurusu olması gerekir. Bu proje ayrıca ilgili test bağdaştırıcıları NuGet Visual Studio ilgili bir pakete de başvuracak. Test Visual Studio bir *.runsettings* dosyası aracılığıyla da başvurulabilirsiniz. *.runsettings dosyasının* aşağıdaki örnekte olduğu gibi bir girdisi olması gerekir:


      ```xml

      <RunSettings>
          <RunConfiguration>
                <TestAdaptersPaths>path-to-your-test-adapter</TestAdaptersPaths>
           </RunConfiguration>
      </RunSettings>

      ```
- name: Yükseltmeden sonra yanlış kapsam
  questions:
  - question: >
      Live Unit Testing Projelerinde başvurulan test bağdaştırıcısını desteklenen sürüme Visual Studio neden yanlış kapsam gösteriyor?
    answer: >
      - Çözümdeki birden çok proje NuGet test bağdaştırıcısı paketine başvurursa, bunların her biri desteklenen sürüme yükseltilsin.


      - Test bağdaştırıcısı paketinden içe aktarılan MSBuild *.props* dosyasının da doğru güncelleştirilmiş olduğundan emin olun. İçeri aktarmanın NuGet paketi sürümünü/yolunu kontrol edin. Bu sürüm genellikle aşağıdaki gibi proje dosyasının üst kısmında bulunabilir:

         ```xml
          <Import Project="..\packages\xunit.runner.visualstudio.2.2.0\build\net20\xunit.runner.visualstudio.props" Condition="Exists('..\packages\xunit.runner.visualstudio.2.2.0\build\net20\xunit.runner.visualstudio.props')" />
         ```
- name: Derlemeleri özelleştirme
  questions:
  - question: >
      Live Unit Testing Derlemelerimi özelleştirebilir miyim?
    answer: >
      Çözümünüz, "normal" işaretlenmiş olmayan derleme için gerekli olmayan izleme (Live Unit Testing) için derleme için özel adımlar gerektiriyorsa, projenize veya *. targets* dosyalarına `BuildingForLiveUnitTesting` özelliği denetleyen ve özel ön/sonrası oluşturma adımları gerçekleştiren bir kod ekleyebilirsiniz. Ayrıca, belirli derleme adımlarını (paket yayımlama veya oluşturma gibi) ya da bu proje özelliğine dayalı Live Unit Testing bir yapıya derleme adımları (örneğin, önkoşulları kopyalama) eklemeyi seçebilirsiniz. Bu özelliğe göre yapınızı özelleştirmek, normal derlemenizi herhangi bir şekilde değiştirmez ve yalnızca Live Unit Testing yapıları etkiler.


      Örneğin, normal bir derleme sırasında NuGet paketleri üreten bir hedef olabilir. Yaptığınız her Düzenlemeden sonra NuGet paketlerinin oluşturulmasını istemezsiniz. Bu nedenle, aşağıdaki gibi bir şey yaparak Live Unit Testing derlemesinde bu hedefi devre dışı bırakabilirsiniz:  


      ```xml

      <Target Name="GenerateNuGetPackages" BeforeTargets="AfterBuild" Condition="'$(BuildingForLiveUnitTesting)' != 'true'">
          <Exec Command='"$(MSBuildThisFileDirectory)..\tools\GenPac" '/>
      </Target>

      ```
- name: Veya içeren hata <OutputPath> iletileri <OutDir><IntermediateOutputPath>
  questions:
  - question: >
      Live Unit Testing çözümümüzü derlemeyi denediğinde neden aşağıdaki hatayı alıyorum: "... koşulsuz olarak ayarlanan veya olarak `<OutputPath>` görünür `<OutDir>` . Live Unit Testing, çıkış derlemesinden testleri yürütmez "?
    answer: >
      Çözümünüz için derleme işleminin ikili dosyaların nerede oluşturulacağını belirten özel bir mantığı varsa, bu hatayı alabilirsiniz. Varsayılan olarak, ikili ağınızın konumu, veya veya ile değişir `<OutputPath>` `<OutDir>` `<IntermediateOutputPath>` `<BaseOutputPath>` `<BaseIntermediateOutputPath>` .


      Live Unit Testing, derleme yapıtlarının bir Live Unit Testing yapıt klasörüne bırakılması ve derleme işleminiz bu değişkenleri geçersiz kılıyorsa başarısız olacağı için bu değişkenleri geçersiz kılar.


      Live Unit Testing derlemeyi başarıyla oluşturmak için iki ana yaklaşım vardır. Daha kolay derleme yapılandırması için çıkış yollarınızın üzerine temelleyebilirsiniz `<BaseIntermediateOutputPath>` . Daha karmaşık yapılandırmalarda çıkış yollarınızı temel alabilirsiniz `<LiveUnitTestingBuildRootPath>` .
  - question: >
      `<OutputPath>` / `<IntermediateOutputPath>` Koşullu olarak geçersiz kılma `<BaseOutputPath>` /  `<BaseIntermediateOutputPath>` .
    answer: >
      > [!NOTE]

      > Bu yaklaşımı kullanmak için her projenin birbirinden bağımsız olarak derlemesi gerekir. Derleme sırasında başka bir projeden bir proje başvuru yapıtları yok. Bir proje çalışma zamanı sırasında başka bir projeden derlemeleri dinamik olarak yüklemez (örneğin `Assembly.Loadfile("..\..\Project2\Release\Project2.dll")` çağrısı).


      Derleme sırasında, Live Unit Testing yapıtlar `<BaseOutputPath>` / `<BaseIntermediateOutputPath>` klasörünü hedeflemek için değişkenleri Live Unit Testing geçersiz kılar.


      Örneğin, derlemeniz aşağıda gösterildiği gibi <OutputPath> geçersiz kılarsa:


      ```xml

      <Project>
        <PropertyGroup>
          <OutputPath>$(SolutionDir)Artifacts\$(Configuration)\bin\$(MSBuildProjectName)</OutputPath>
        </PropertyGroup>
      </Project>

      ```


      daha sonra bunu aşağıdaki XML ile değiştirebilirsiniz:


      ```xml

      <Project>
        <PropertyGroup>
          <BaseOutputPath Condition="'$(BaseOutputPath)' == ''">$(SolutionDir)Artifacts\$(Configuration)\bin\$(MSBuildProjectName)\</BaseOutputPath>
          <OutputPath Condition="'$(OutputPath)' == ''">$(BaseOutputPath)</OutputPath>
        </PropertyGroup>
      </Project>

      ```


      Bu, klasörün `<OutputPath>` içinde yer alan bir özellik `<BaseOutputPath>` sağlar.


      Derleme işleminizi `<OutDir>` doğrudan geçersiz kılmayın; derleme `<OutputPath>` yapıtlarını belirli bir konuma bırakmak için geçersiz kılın.
  - question: >
      özelliğine göre özelliklerinizi geçersiz `<LiveUnitTestingBuildRootPath>` kılma.
    answer: >
      > [!NOTE]

      > Bu yaklaşımda, derleme sırasında oluşturulmaz yapıtlar klasörü altına eklenen dosyalar konusunda dikkatli olmalısınız. Aşağıdaki örnek, packages klasörünü yapıtların altına yerleştirerek ne yapacaklarını gösterir. Bu klasörün içeriği derleme sırasında oluşturulmay olduğundan, MSBuild **özelliği değiştirilemez.**


      Derleme Live Unit Testing `<LiveUnitTestingBuildRootPath>` özelliği, yapıtlar klasörünün Live Unit Testing ayarlanır.


      Örneğin, projenizin burada gösterilen yapıya sahip olduğunu varsayalım.


      ```

      .vs\...\lut\0\b

      artifacts\{binlog,obj,bin,nupkg,testresults,packages}

      src\{proj1,proj2,proj3}

      tests\{testproj1,testproj2}

      Solution.sln

      ```

      Derleme Live Unit Testing özelliği `<LiveUnitTestingBuildRootPath>` tam yoluna `.vs\...\lut\0\b` ayarlanır. Proje çözüm `<ArtifactsRoot>` dir ile eşilen özelliği tanımladığı sürece MSBuild projesini aşağıdaki gibi güncelleştirebilirsiniz:


      ```xml

      <Project>
          <PropertyGroup Condition="'$(LiveUnitTestingBuildRootPath)' == ''">
              <SolutionDir>$([MSBuild]::GetDirectoryNameOfFileAbove(`$(MSBuildProjectDirectory)`, `YOUR_SOLUTION_NAME.sln`))\</SolutionDir>

              <ArtifactsRoot>Artifacts\</ArtifactsRoot>
              <ArtifactsRoot Condition="'$(LiveUnitTestingBuildRootPath)' != ''">$(LiveUnitTestingBuildRootPath)</ArtifactsRoot>
          </PropertyGroup>

          <PropertyGroup>
              <BinLogPath>$(ArtifactsRoot)\BinLog</BinLogPath>
              <ObjPath>$(ArtifactsRoot)\Obj</ObjPath>
              <BinPath>$(ArtifactsRoot)\Bin</BinPath>
              <NupkgPath>$(ArtifactsRoot)\Nupkg</NupkgPath>
              <TestResultsPath>$(ArtifactsRoot)\TestResults</TestResultsPath>

              <!-- Note: Given that a build doesn't generate packages, the path should be relative to the solution dir, rather than artifacts root, which will change during a Live Unit Testing build. -->
              <PackagesPath>$(SolutionDir)\artifacts\packages</PackagesPath>
          </PropertyGroup>
      </Project>

      ```
- name: Yapıt konumu oluşturma
  questions:
  - question: >
      Bir derlemenin yapıtlarının .vs Live Unit Testing yerine belirli bir konuma gitmelerini istiyorum. Bunu nasıl değiştirebilirim?
    answer: >
      Kullanıcı `LiveUnitTesting_BuildRoot` düzeyinde ortam değişkenlerini, derleme yapıtlarını Live Unit Testing istediğiniz yola ayarlayın. 
- name: Test Gezgini Live Unit Testing karşı
  questions:
  - question: >
      Test Gezgini penceresinden testlerin Live Unit Testing testlerin çalıştırılmasının farkı nasıl çalışır?
    answer: >
      Çeşitli farklılıklar vardır:


      - **Test Gezgini** penceresinde testleri çalıştırmak veya hata ayıklamak, düzenli ikili dosyalar çalıştırlarken Live Unit Testing, işaretlenmiş ikililer çalıştırır. Araçlı ikililerin hata ayıklaması yapmak istiyorsanız, [hata ayıklayıcı ekleme.](xref:System.Diagnostics.Debugger.Launch)   Test yönteinizde başlatma yöntemi çağrısı, bu yöntem yürütüldüğünde hata ayıklayıcının başlatılmasına neden olur (Live Unit Testing tarafından yürütüldüğünde dahil) ve ardından, izlenen ikiliyi iliştirebilir ve hata ayıklaması yapabilirsiniz. Bununla birlikte, umuyoruz çoğu kullanıcı senaryosunda sizin için şeffaf ve işaretlenmiş ikililerin hata ayıklamanıza gerek kalmaz.


      - Live Unit Testing testleri çalıştırmak için yeni bir uygulama etki alanı oluşturmaz, ancak **Test Gezgini** penceresinden çalıştırılan testler yeni bir uygulama etki alanı oluşturur.


      - Live Unit Testing her bir test derlemesindeki testleri sırayla çalıştırır. **Test Gezgini**'nde, paralel olarak birden çok test çalıştırmayı seçebilirsiniz.


      - **Test Gezgini** , testleri tek iş parçacıklı bir grupta (STA) çalıştırır. Live Unit Testing, testleri çok iş parçacıklı bir grupta (MTA) çalıştırır. Live Unit Testing 'de STA 'da MSTest testlerini çalıştırmak için, test yöntemini veya içeren sınıfı, `<STATestMethod>` `<STATestClass>` NuGet paketinde bulunan veya özniteliğiyle süsle birlikte kullanabilirsiniz `MSTest.STAExtensions 1.0.3-beta` . NUnit için, özniteliğiyle birlikte test yöntemini `<RequiresThread(ApartmentState.STA)>` ve xUnit için özniteliği ile süslemek için `<STAFact>` .
- name: Testleri hariç tut
  questions:
  - question: >
      Nasıl yaparım? testlerin Live Unit Testing katılmasını hariç tutsın mı?
    answer: >
      Kullanıcıya özgü ayar için, [Visual Studio 'da Live Unit Testing kullanma](live-unit-testing.md#include-and-exclude-test-projects-and-test-methods) makalesindeki "test projelerini ve test yöntemlerini ekleme ve dışlama" bölümüne bakın. Belirli bir düzenleme oturumu için belirli bir test kümesini çalıştırmak veya kendi kişisel tercihlerinizi sürdürmek istediğinizde, testlerin dahil edilmesi veya dışlanması yararlı olur.


      Çözüme özgü ayarlar için, yöntemleri, özellikleri, sınıfları veya yapıları dışlamak için özniteliğini program aracılığıyla uygulayabilirsiniz ve bu öznitelikler <xref:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute?displayProperty=fullName> Live Unit Testing. Ayrıca, proje dosyanız içinde özelliğini olarak `<ExcludeFromCodeCoverage>` `true` ayararak projenin tamamının takipten dışlandırabilirsiniz. Live Unit Testing, yine de göstergede yer alan testleri çalıştıracak ancak kapsamları görselleştirilemayacak.


      Ayrıca geçerli uygulama etki alanında yüklü olup olmadığını kontrol edip nedene bağlı `Microsoft.CodeAnalysis.LiveUnitTesting.Runtime` olarak testleri devre dışı abilirsiniz. Örneğin, xUnit ile aşağıdakine benzer bir şey yapabilirsiniz:


      ```csharp

      [ExcludeFromCodeCoverage]

      public class SkipLiveFactAttribute : FactAttribute

      {
         private static bool s_lutRuntimeLoaded = AppDomain.CurrentDomain.GetAssemblies().Any(a => a.GetName().Name ==
                                                  "Microsoft.CodeAnalysis.LiveUnitTesting.Runtime");
         public override string Skip => s_lutRuntimeLoaded ? "Test excluded from Live Unit Testing" : "";
      }


      public class Class1

      {
         [SkipLiveFact]
         public void F()
         {
            Assert.True(true);
         }
      }

      ```
- name: Sürekli derlemeler
  questions:
  - question: >
      Düzenleme yapmamama rağmen Canlı Birim testi neden sürekli çözüm derleyeme devam ediyor?
    answer: >
      Derleme işlemi çözümün kendi parçası olan kaynak kodu oluştursa ve derleme hedef dosyalarında uygun giriş ve çıkışlar belirtilmemişse, düzenleme yapmasanız bile çözümünüz derlemenize yardımcı olabilir. MSBuild'in uygun güncel denetimleri gerçekleştirip yeni bir derlemenin gerekli olup olmadığını belirlemesi için hedeflere girişlerin ve çıkışların bir listesi ver gerekir.


      Live Unit Testing dosyaların değiştiğini algılayan her derlemeyi başlatır. Çözüm derlemesi kaynak dosyaları oluştura olduğundan, Live Unit Testing sonsuz derleme döngüsüne girebilirsiniz. Ancak, Live Unit Testing ikinci derlemeyi başlatırken (önceki derlemeden yeni oluşturulan kaynak dosyaları algıladikten sonra) hedefin girişleri ve çıkışları denetlenirse, giriş ve çıkış denetimleri her şeyin güncel olduğunu işaret eder çünkü derleme döngüsünden çıkar.
- name: Düzenleyici simgeleri
  questions:
  - question: >
      Çıkış penceresindeki iletilere göre testleri çalıştırmış Live Unit Testing neden düzenleyicide herhangi bir simge göremiyorum?
    answer: >
      Üzerinde çalışan derlemeler herhangi bir nedenle Live Unit Testing düzenleyicide simge görmeyebilirsiniz. Örneğin, Live Unit Testing ayara sahip projelerle uyumlu `<UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>` değildir. Bu durumda, derleme işleminizin bu ayarı kaldırmak veya Live Unit Testing çalışması için olarak değiştirmek üzere güncelleştirilmesi gerekir `true` . 
- name: Günlükleri yakala
  questions:
  - question: >
      Hata raporlarına dosya eklemek için daha ayrıntılı Günlükler mi Nasıl yaparım??
    answer: >
      Daha ayrıntılı Günlükler toplamak için birkaç şey yapabilirsiniz:


      - **Araçlar**  >  **Seçenekler**  >  **Live Unit Testing** gidin ve günlük seçeneğini **verbose** olarak değiştirin. Ayrıntılı günlük kaydı, **Çıkış** penceresinde daha ayrıntılı günlüklerin gösterilmesine neden olur.


      - `LiveUnitTesting_BuildLog`Kullanıcı ortam değişkenini, MSBuild günlüğünü yakalamak için kullanmak istediğiniz dosyanın adı olarak ayarlayın. Live Unit Testing derlemelerden ayrıntılı MSBuild günlük iletileri daha sonra bu dosyadan alınabilir.


      - `LiveUnitTesting_TestPlatformLog` `1` Test platformu günlüğünü yakalamak için Kullanıcı ortam değişkenini olarak ayarlayın. Live Unit Testing çalıştırmalarının ayrıntılı test platformu günlüğü iletileri daha sonra öğesinden alınabilir `[Solution Root]\.vs\[Solution Name]\log\[VisualStudio Process ID]` .


      - Adlı bir Kullanıcı düzeyi ortam değişkeni oluşturun `VS_UTE_DIAGNOSTICS` ve bunu 1 (veya herhangi bir değer) olarak ayarlayın ve Visual Studio 'yu yeniden başlatın. Artık Visual Studio 'daki **çıkış testleri** sekmesinde çok fazla günlük görmeniz gerekir.
additionalContent: "\n## <a name=\"see-also\"></a>Ayrıca bkz.\n   - [Live Unit Testing](live-unit-testing.md)"
